{"version":3,"sources":["components/input/StatusForm.js","components/Home.js","components/sessions/Session.js","components/sessions/SessionList.js","components/sessions/SessionDetails.js","App.js","serviceWorker.js","index.js"],"names":["StatusForm","props","onChange","data","setState","target","name","value","clearForm","username","comment","status","session_id","onSubmit","preventDefault","reset","axios","method","url","state","then","response","console","log","error","session","Form","className","this","Group","Label","as","Check","type","label","id","controlId","Control","placeholer","rows","Button","variant","React","Component","Home","src","alt","async","charSet","Course","getSessionList","get","headers","sessions","tableSetup","catch","message","componentDidMount","interval","setInterval","time","Date","now","pagination","paginationFactory","page","selectRow","mode","style","background","clickToSelect","onSelect","row","isSelect","rowIndex","e","selectSession","keyField","columns","dataField","text","sort","baseProps","undefined","clearInterval","index","moment","format","SessionDetails","getStatusList","posts","filter","post","formatter","cell","dateObj","getUTCMonth","slice","getUTCDate","getUTCFullYear","endpoint","task","task_objective","created_at","course_id","App","sessionSelected","link","to","path","component","exact","SessionList","Boolean","window","location","hostname","match","io","on","alert","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.582465c0.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Button } from 'react-bootstrap/';\nimport axios from 'axios';\nimport './forms.css';\nclass StatusForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      comment: '',\n      status: '',\n      session_id: this.props.session || '',\n    };\n  }\n\n  onChange = (data) => {\n    this.setState({ [data.target.name]: data.target.value });\n  }\n\n  clearForm = () => {\n    this.setState({\n      username: '',\n      comment: '',\n      status: '',\n      session_id: '',\n    });\n  }\n\n  onSubmit = (data) =>{\n    let link = \"https://classroomlive-basic-api.herokuapp.com/posts\";\n    // let link= \"http://localhost:3000/posts\";\n    data.preventDefault();\n    data.target.reset();\n    axios({\n      method: 'post',\n      url: link,\n      data: {\n        username: this.state.username,\n        comment: this.state.comment,\n        status: this.state.status,\n        session_id: this.state.session_id,\n      }\n    }).then((response) => {\n      console.log(response);\n      \n    }, (error) =>{\n      console.log(error);\n    });\n    }\n\n  render() {\n    return (\n      <Form className=\"studentInput\" onSubmit={this.onSubmit}>\n        <fieldset>\n          <Form.Group>\n            <Form.Label as=\"legend\">\n              Status:\n            </Form.Label>\n            <Form.Check\n              type=\"radio\"\n              label=\"Stuck, Can't Make Progress\"\n              name=\"status\"\n              id=\"stuck\"\n              value=\"stuck\"\n              onChange={this.onChange}\n            />\n            <Form.Check\n              type=\"radio\"\n              label=\"Question, but Still Working\"\n              name=\"status\"\n              id=\"question\"\n              value=\"question\"\n              onChange={this.onChange}\n            />\n            <Form.Check\n              type=\"radio\"\n              label=\"Good, Working Fine\"\n              name=\"status\"\n              id=\"working\"\n              value=\"working\"\n              onChange={this.onChange}\n            />\n            <Form.Check\n              type=\"radio\"\n              label=\"Done, Task Completed\"\n              name=\"status\"\n              id=\"done\"\n              value=\"done\"\n              onChange={this.onChange}\n            />\n          </Form.Group>\n        </fieldset>\n          <Form.Group controlId=\"StatusUserId\">\n          <Form.Label>Username: </Form.Label>\n            <Form.Control as=\"input\" name=\"username\" placeholer=\"Enter Username\" onChange={this.onChange}/>\n            </Form.Group>\n            <Form.Group controlId=\"SessionId\">\n            <Form.Label>Session ID:</Form.Label>\n            <Form.Control as=\"input\" name=\"session_id\" value={this.state.session_id} placeholer=\"Enter Session ID\" onChange={this.onChange}/>\n            </Form.Group>\n            <Form.Group controlId=\"StatusComment\">\n            <Form.Label>Comment:</Form.Label>\n            <Form.Control as=\"textarea\" name=\"comment\" placeholer=\"Comment Text Here\" rows=\"3\" onChange={this.onChange}/>\n            </Form.Group>\n          {/* <Form.Check \n            type=\"switch\"\n            label=\"Push to Public FAQ\"\n            id=\"disabled-custom-switch\"\n            onChange={this.onChange}\n            name=\"publicToggle\"\n          /> */}\n          <Button variant=\"light\" type=\"submit\">\n            Submit\n          </Button>\n\n        </Form>\n    )};\n}\n\nexport default StatusForm;\n","import React from 'react';\nimport { NavLink, Route, Switch} from \"react-router-dom\";\nimport { Tab, Tabs, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport StatusForm from './input/StatusForm.js'\nimport './Home.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass Home extends React.Component {\n  render () {\n  return (\n    <section className=\"HomeContainer\">\n\n            <img src=\"https://live.staticflickr.com/65535/49296000551_fe05df3618_b.jpg\" className=\"homeTitle\" alt=\"ClassroomLogo\" /><script async src=\"//embedr.flickr.com/assets/client-code.js\" charSet=\"utf-8\"></script>\n            <p>A Classroom Management Tools for Teachers Who Want to Facilitate Effecting Work Time and Digitally Track Student Need</p>\n    \n      \n    </section>\n  );\n}\n}\n\n\n\nexport default Home;\n\n\n\n// class LiveStudentView extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       codes: [],\n//       error: '',\n//     };\n//   }\n\n//   liveToolbar = () => {\n//     return (\n//       <Tabs defaultActiveKey=\"status\" id=\"uncontrolled-tab-example\">\n//         <Tab eventKey=\"status\" title=\"Status\">\n//           <p><StatusList codes={this.state.codes}/></p>\n//         </Tab>\n//         <Tab eventKey=\"questions\" title=\"Questions\">\n//           <section><QuestionList /></section>\n//         </Tab>\n//       </Tabs>\n//     )\n//   }\n\n//   getCodes () {\n//     axios.get('http://localhost:3000/codes')\n//     .then((response) => {\n//       this.setState({\n//         codes: response.data,\n//       });      \n//     })\n//     .catch((error) => {\n//       this.setState({ error: error.message });\n//     });\n//   }\n\n//   endLiveSession = () => {\n//     // end timer, set session live to false\n//     this.props.endLive();\n//   }\n\n//   componentDidMount () {\n//     this.getCodes();\n//   }\n    \n//   render () {\n//     return (\n//       <section className='liveContainer'>\n//         <section className='liveHeader'>History 101 - Live Session Timer End <Stopwatch /></section>\n//         <section className='liveDetails'>Task - Task Objective</section>\n//         <section className=\"endLive\"><Button variant=\"outline-danger\" onClick={this.endLiveSession}>End Live Session</Button></section>\n//         <section className='statusKey'><StatusKey codes={this.state.codes} /></section>\n//         <section className='liveContent'>{this.liveToolbar()}</section>\n//         <section className='selected'>Selected Student</section>\n//         <section className='teachInfo'>Teacher Info</section>\n//         <section className='studentQueue'>Student Queue</section>\n//       </section>\n//     )};\n// }\n\n// export default LiveStudentView;","import React from 'react';\nimport { Accordion, Card, Button } from 'react-bootstrap';\nimport { NavLink} from \"react-router-dom\";\nimport Moment from 'react-moment';\n// import './Course.css';\n\nclass Session extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n    \n  render () {\n    let link=\"/sessions/\"+this.props.id;\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} eventKey={this.props.value}>\n          <Moment format=\"DD/MM/YYYY\">{this.props.date}</Moment> - {this.props.task} \n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey={this.props.value}>\n          <Card.Body>\n            <p>Objective: {this.props.taskObjective}</p>\n            <NavLink to={link}><Button variant=\"outline-secondary\" className=\"sessionButton\" onClick={() => this.props.selectSession(this.props)}>Details ◢</Button></NavLink>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )};\n}\n\nexport default Session;","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Session from './Session.js';\nimport { Redirect } from \"react-router-dom\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { Table } from 'react-bootstrap';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport axios from 'axios'\nimport moment from 'moment'\n// import axios from 'axios';\nimport './Session.css';\n\nclass Course extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessions: [],\n      time: undefined,\n    };\n  }\n\n\n  getSessionList = () => {\n    let link = \"https://classroomlive-basic-api.herokuapp.com/sessions\";\n    // let link = \"http://localhost:3000/sessions\"\n    const config = {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      }\n    };\n    axios.get(link, config)\n    .then((response) => {\n      this.setState({\n        sessions: response.data,\n      });\n      this.tableSetup();\n    })\n    .catch((error) => {\n      this.setState({ error: error.message });\n    });\n  }\n\n  componentDidMount = () => {\n    this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\n    console.log(this.state.time);\n    this.getSessionList();\n  }\n\n  componentWillUnmount() {\n    console.log(\"unmounted\");\n    clearInterval(this.interval);\n  }\n  \n  // redirect = (id) => {\n  //   let link = '/sessions/' + id;\n  //   console.log(link);\n  //   return <Redirect to={link} />\n  // }\n  dateFormat(value, row, index) {\n    return moment(value).format('DD/MM/YYYY');\n }\n\n  tableSetup = () => {\n    const pagination = paginationFactory({\n      page: 1,\n    });\n    const selectRow = {\n      mode: 'radio', // single row selection\n      style: { background: 'red' },\n      clickToSelect: true,\n      onSelect: (row, isSelect, rowIndex, e) => {\n        this.props.selectSession(row);\n        // this.redirect(row.id);\n      }\n    };\n    \n    \n    const columns = [{\n      dataField: 'id',\n      text: 'ID',\n      sort: true\n    }, {\n      dataField: 'task',\n      text: 'Task',\n      sort: true\n    }, {\n      dataField: 'objective',\n      text: 'Objective',\n      sort: true\n    }, {\n      dataField: 'date',\n      text: 'Date',\n      // formatter: (cell) => {\n      //   let dateObj = cell;\n      //   if (typeof cell !== 'object') {\n      //     dateObj = new Date(cell);\n      //   }\n      //   return `${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${('0' + dateObj.getUTCDate()).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      // },\n      sort: true\n    }];\n    return (\n      <ToolkitProvider\n      keyField=\"id\"\n      data={ this.state.sessions }\n      columns={ columns }\n>\n  {\n    props =>\n      <BootstrapTable pagination={ pagination } selectRow={ selectRow } { ...props.baseProps } />\n  }\n</ToolkitProvider>)\n    // ) <BootstrapTable keyField='id' data={ this.state.sessions } columns={ columns } />\n  }\n\n  // displaySessions = () => {\n  //   console.log(this.state.sessions);\n  //   const sessionList = this.state.sessions.map((session, i) => {\n  //       return  <tr>\n  //                 <td>{session.id}</td>\n  //                 <td>{session.course_id}</td>\n  //                 <td>{session.task}</td>\n  //                 <td>{session.task_objective}</td>\n  //                 <td>{session.created_at}</td>\n                  \n  //               </tr>\n  //     });\n  //   return sessionList;\n  // }\n    \n  render () {\n    return (\n      <section>\n\n\n    {this.tableSetup()}\n\n      </section>\n    )};\n}\n\nexport default Course;\n\n// class Course extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//     };\n//   }\n\n//   componentDidMount = () => {\n//     this.displaySessions();\n//   }\n \n//   displaySessions = () => {\n//     console.log(this.props);\n//     const sessionList = this.props.sessions.map((session, i) => {\n//         return <Session date={session.created_at} selectSession={this.props.selectSession} task={session.task} taskObjective={session.task_objective} id={session.id} value={i} key={i}/>\n//       });\n//     return sessionList;\n//   }\n    \n//   render () {\n//     return (\n//       <section>\n//         <Accordion defaultActiveKey=\"0\">\n//         {this.displaySessions()}\n//         </Accordion>\n//       </section>\n//     )};\n// }\n\n// export default Course;","import React from 'react';\nimport StatusForm from '../input/StatusForm';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\n// import socketIOClient from \"socket.io-client\";\nimport axios from 'axios'\nimport './Session.css';\nclass SessionDetails extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      response: true,\n      endpoint: \"http://127.0.0.1:4001\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.getStatusList();\n    // this.startSocket();\n  }\n\n  // startSocket = () => {\n  //   const { endpoint } = this.state.endpoint;\n  //   // const socket = socketIOClient(endpoint);\n  //   var socket = socketIOClient.connect('http://localhost:3000/');\n  //   socket.on(\"FromAPI\", data => this.setState({ response: data }));\n  // }\n\n  getStatusList = () => {\n    let link = \"https://classroomlive-basic-api.herokuapp.com/posts\";\n    // let link = \"http://localhost:3000/posts\";\n    axios.get(link)\n    .then((response) => {\n      this.setState({\n        posts: (response.data).filter(post => post.session_id === this.props.session.id)\n      });\n      this.tableSetup();\n    })\n    .catch((error) => {\n      this.setState({ error: error.message });\n    });\n  }\n\n  tableSetup = () => {    \n    const columns = [{\n      dataField: 'session_id',\n      text: 'Session ID',\n      sort: true\n    }, {\n      dataField: 'username',\n      text: 'Username',\n      sort: true\n    }, {\n      dataField: 'comment',\n      text: 'Comment',\n      sort: true\n    }, {\n      dataField: 'created_at',\n      text: 'Date',\n      formatter: (cell) => {\n        let dateObj = cell;\n        if (typeof cell !== 'object') {\n          dateObj = new Date(cell);\n        }\n        return `${('0' + (dateObj.getUTCMonth() + 1)).slice(-2)}/${('0' + dateObj.getUTCDate()).slice(-2)}/${dateObj.getUTCFullYear()}`;\n      },\n      sort: true\n    }, {\n      dataField: 'status',\n      text: 'Status',\n      // return { backgroundColor: colorDict[cell] };\n      sort: true\n    }];\n    return (\n      <ToolkitProvider\n      keyField=\"id\"\n      data={ this.state.posts }\n      columns={ columns }\n      >\n        \n  {\n    props =>\n      <BootstrapTable { ...props.baseProps } />\n  }\n</ToolkitProvider>)\n  }\n\nrender () {\n  const { response } = this.state;\n  // console.log(this.props);\n  console.log(this.state.response);\n  // console.log(response);\n  return (\n      <section className=\"body\">\n        <h3>{this.props.session.task}</h3>\n        <p>Objective: {this.props.session.task_objective}</p>\n        <p>Date: {this.props.session.created_at}</p>\n        <p>Course ID: {this.props.session.course_id}</p>\n        <p>Session ID: {this.props.session.id}</p>\n        <StatusForm session={this.props.session.id} />\n        {response\n              ? <p>\n                The socket response is: {response}\n              </p>\n              : <p>Loading Socket Response...</p>}\n        {this.tableSetup()}\n        {/* <StatusForm sessionId={this.props.session.id}/> */}\n      </section>\n      );\n}\n}\nexport default SessionDetails;\n\n","import React, { Component } from \"react\";\n// import socketIOClient from \"socket.io-client\";\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport Home from './components/Home.js';\nimport { NavLink, Route } from \"react-router-dom\";\nimport StatusForm from './components/input/StatusForm.js'\nimport SessionList from './components/sessions/SessionList.js'\nimport SessionDetails from './components/sessions/SessionDetails.js'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport './App.css'\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      response: true,\n      endpoint: \"http://127.0.0.1:4001\",\n      sessionSelected: false,\n      session: [],\n      link: '',\n    };\n  }\n  selectSession = (session) => {\n    console.log(\"select session reached\");\n    console.log(session);\n    this.setState({\n      sessionSelected: true,\n      session: session,\n      link: \"/sessions/\" +  session.id\n    });\n  }\n  componentDidMount() {\n    // const { endpoint } = this.state;\n    // const socket = socketIOClient(endpoint);\n    // socket.on(\"FromAPI\", data => this.setState({ response: data }));\n  }\n  render() {\n    // const { response } = this.state;\n    return (\n        // <div style={{ textAlign: \"center\" }}>\n        //   {response\n        //       ? <p>\n        //         The temperature in Florence is: {response} °F\n        //       </p>\n        //       : <p>Loading...</p>}\n        // <Router>\n        //   <section className=\"App\">\n        //     {/* {this.welcome()} */}\n        //     <Home />\n        //   </section>\n        // </Router>\n        // </div>\n        <Router>\n        <section className=\"HomeContainer\">\n        <ul className=\"header\">\n          <li><NavLink to=\"/home\">Welcome</NavLink></li>\n          <li><NavLink to=\"/status/new\">Post Status</NavLink></li>\n          <li><NavLink to=\"/sessions\">Session List</NavLink></li>\n          {this.state.sessionSelected ? <li><NavLink to={this.state.link}>Session Details</NavLink></li> : \"\"}\n        </ul>\n        <div className=\"content\">\n          <Route path=\"/home\" component={Home}/>\n          <Route path=\"/status/new\" component={StatusForm}/>\n          <Route exact path=\"/sessions\">\n          <SessionList selectSession={this.selectSession} />\n          </Route> \n          <Route exact path=\"/sessions/:id\">\n            <SessionDetails session={this.state.session} />\n            </Route>\n        </div>\n      </section>\n      </Router>\n    );\n  }\n}\nexport default App;\n\n// import React from 'react';\n// import socketIOClient from \"socket.io-client\";\n// import NavBar from './components/nav_tools/NavBar.js';\n// import Home from './components/Home.js';\n// import Dashboard from './components/Dashboard.js';\n// // import Moment from 'react-moment';\n// import './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css'\n// import { BrowserRouter as Router} from \"react-router-dom\";\n// // src/components/nav_tools/NavBar.js\n// class App extends React.Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       loggedIn: false,\n//       teacher: false,\n//       userId: 1,\n//       alertText: '',\n//       alertVariant: '',\n//       response: false,\n//       endpoint: \"http://127.0.0.1:4001\"\n//       }\n//     }\n\n//     componentDidMount() {\n//       const { endpoint } = this.state.endpoint;\n//       const socket = socketIOClient(endpoint);\n//       socket.on(\"FromAPI\", data => this.setState({ response: data }));\n//       console.log(this.state.response);\n//     }\n\n//   login = () => {\n//     this.setState({\n//       loggedIn: true,\n//       userId: 1,      \n//       alertText: 'Successfully Signed In',\n//       alertVariant: 'success',\n//     });\n//     // this.showAlert();\n//   }\n\n//   logout = () => {\n//     this.setState({\n//       loggedIn: false,\n//       userId: undefined,\n//       alertText: 'Successfully Signed Out',\n//       alertVariant: 'warning',\n//     })\n//   }\n\n//   welcome = () => {\n//     const { response } = this.state.response;\n//     return (\n//     <section className=\"AppContainer\">\n//       {response\n//               ? <p>\n//                 Socket IO Response: {response} °F\n//               </p>\n//               : <p>No Data Received</p>}\n//             <header>\n//               <NavBar loggedIn={this.state.loggedIn} login={this.login} logout={this.logout} />\n//             </header>\n//             <section>\n//               {this.state.loggedIn ? <Dashboard user={this.state.userId} /> : <Home />}\n//             </section>\n//             <footer>\n//                   <p>Classroom Live - Created By Katie Kennedy, Ada Developers Academy - Cohort 12</p>\n//             </footer>\n//             </section>\n//     )\n//   }\n\n// render () {\n\n//   return (\n//   <Router>\n//         <section className=\"App\">\n//           {this.welcome()}\n//         </section>\n//   </Router>\n\n//   );\n// }};\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport io from 'socket.io-client';\n\nconst socket = io();\n\n// sockets test\nsocket.on('hello', ({ message }) => alert(message));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}